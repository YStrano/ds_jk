{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [1, 2, 3, 4, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$a_0 = 1$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[:3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [1]\n",
    "for i in range(10):\n",
    "    next = a[i] + 1\n",
    "    a.append(next)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(a, columns = ['Sequence Values'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sequence Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Sequence Values\n",
       "0                 1\n",
       "1                 2\n",
       "2                 3\n",
       "3                 4\n",
       "4                 5\n",
       "5                 6\n",
       "6                 7\n",
       "7                 8\n",
       "8                 9\n",
       "9                10\n",
       "10               11"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [3]\n",
    "for i in range(10):\n",
    "    next = a[i] + 2\n",
    "    a.append(next)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(a, columns = ['Sequence Values'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sequence Values</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Sequence Values\n",
       "0                 3\n",
       "1                 5\n",
       "2                 7\n",
       "3                 9\n",
       "4                11\n",
       "5                13\n",
       "6                15\n",
       "7                17\n",
       "8                19\n",
       "9                21\n",
       "10               23"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x117e6c860>]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10efd95f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(a, 'o')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x117f6b390>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nRK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10efd95c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(a, '--o', label = 'Sequence $a_n$')\n",
    "plt.title(\"My Arithmetic Sequence\")\n",
    "plt.legend(loc = 'best', frameon = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
