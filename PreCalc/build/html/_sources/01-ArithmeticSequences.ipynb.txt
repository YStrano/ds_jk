{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Arithmetic Sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/T5CHq00tsAk\" \n",
       "frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%HTML\n",
    "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/T5CHq00tsAk\" \n",
    "frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sequences\n",
    "\n",
    "A **sequence** is an ordered list of terms.  We will name these sequences.  For example, the sequence $a$ with the first five integers could be written as:\n",
    "\n",
    "$$a = [1, 2, 3, 4, 5]$$\n",
    "\n",
    "Here, the first **term** of the sequence is 1, the second term is 2, etc.  It is common to begin sequences with a **zero index** however, and we will often refer to the **first term** of the sequence **a** as $a_0$.  Thus, we have\n",
    "\n",
    "$$a_0 = 1$$\n",
    "$$a_1 = 2$$\n",
    "$$a_2 = 3$$\n",
    "$$a_3 = 4$$\n",
    "$$a_4 = 5$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [1, 2, 3, 4, 5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Recursive Definitions\n",
    "\n",
    "**EXAMPLE**: Create a sequence named $b$. Start with 3.  Add 5 to the previous term.  Do this 10 times.\n",
    "\n",
    "---\n",
    "\n",
    "In symbols, we would write the start of this sequence $b$ as \n",
    "\n",
    "$$b_0 = 3; b_1 = b_0 +3$$\n",
    "\n",
    "In general, we can write this as a **recursive rule**\n",
    "\n",
    "$$b_{n+1} = b_n + 3$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Arithmetic Sequences\n",
    "\n",
    "**DEFINITION**: Any sequence formed by adding a constant amount will be considered an **Arithmetic Sequence**.\n",
    "\n",
    "**EX**: $c_0 = 4; c_{n+1} = c_n + 8$\n",
    "\n",
    "The fact that we are adding a constant value (8), keys us in that we are dealing with an arithmetic sequence.  We want to do a few things with arithmetic sequences:\n",
    "\n",
    "1. Represent arithmetic sequences with symbols\n",
    "2. Represent arithmetic sequences with words\n",
    "3. Represent arithmetic sequence with tables\n",
    "4. Represent arithemtic sequences with graphs\n",
    "\n",
    "In our examples, we will use computers to help with some of these tasks."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Arithmetic Sequences: Symbolic Representation\n",
    "\n",
    "In addition to the *recursive* form of arithmetic sequences, we can represent the sequences in **closed** or **functional** form.  \n",
    "\n",
    "The sequence \n",
    "\n",
    "$$a_0 = 3; a_{n+1} = a_n + 2$$\n",
    "\n",
    "would have terms\n",
    "\n",
    "$$3, 3 + 2, 3 + 2 + 2, 3 + 2 + 2 + 2, ...$$\n",
    "\n",
    "Recognizing the pattern that we will add multiples of 2 to 3, where the number of multiples depends on the term number, we can see the relationship:\n",
    "\n",
    "$$a_n = 3 + 2n$$\n",
    "\n",
    "and we can test the relationship as follows:\n",
    "\n",
    "$$a_0 = 3 + 2(0) = 3$$\n",
    "\n",
    "$$a_1 = 3 + 2(1) = 5$$\n",
    "\n",
    "$$a_2 = 3 + 2(2) = 7$$\n",
    "\n",
    "To write this using function notation, we have:\n",
    "\n",
    "$$a(n) = 3 + 2n$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Google Sheets to Build Arithmetic Sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ieXzx2unGrk\" \n",
       "frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%HTML\n",
    "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/ieXzx2unGrk\" \n",
    "frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Python for Sequences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Q1zEuHtH-yI\"\n",
       "frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "%%HTML\n",
    "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/Q1zEuHtH-yI\"\n",
    "frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen></iframe>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [3]\n",
    "for i in range(10):\n",
    "    next = a[i] + 2\n",
    "    a.append(next)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Arithmetic Sequences: Tables\n",
    "\n",
    "When we represent arithmetic sequences in tables, we should see a list of terms that represent constant change.  We can add a column that demonstrates this, using the notion of a **first difference**.\n",
    "\n",
    "| $n$ | $a_n$ | **First Difference** |\n",
    "| ----- | ------ | ----------------- |\n",
    "| 0   |   3   |  na |\n",
    "| 1   |   5   | 2   |\n",
    "| 2   | 7     | 2 |\n",
    "| 3    | 10   | 2  |\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Using Python and Pandas for Tables\n",
    "\n",
    "```python\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "```\n",
    "\n",
    "We use these lines to load and abbreviate the `Pandas` and `Numpy` libraries.  These have many functions we can use to perform mathematics.  We will create a `DataFrame` and find the first difference of terms using `np.diff`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Creating a DataFrame titled `df` with a column named `Terms`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.DataFrame(a, columns = ['Terms'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Look at the `DataFrame`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Terms</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Terms\n",
       "0       3\n",
       "1       5\n",
       "2       7\n",
       "3       9\n",
       "4      11\n",
       "5      13\n",
       "6      15\n",
       "7      17\n",
       "8      19\n",
       "9      21\n",
       "10     23"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can refer to individual elements much as we did with list elements."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Terms'][0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    3\n",
       "1    5\n",
       "2    7\n",
       "Name: Terms, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Terms'][:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we will form a column of first differences using the `np.diff` command."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "diffs = np.diff(df.Terms)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(diffs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "diffs[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We need to add a 2 to the list, because our first entry wouldn't be anything, just as there is no first difference between the first term and the previous, as there is nothing prior to the first term."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "diffs = np.insert(diffs, 0, 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['First Differences'] = diffs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Terms</th>\n",
       "      <th>First Differences</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Terms  First Differences\n",
       "0      3                  2\n",
       "1      5                  2\n",
       "2      7                  2\n",
       "3      9                  2\n",
       "4     11                  2"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Arithmetic Sequences: Plotting with Python\n",
    "\n",
    "One of the characteristic features of **arithmetic sequences** is what their plots look like.  We will use `matplotlib` to plot our first sequence.  Again, we load the library, and also we ask the notebook to produce the plots in the notebook itself with `%matplotlib inline`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To make a plot of the sequence, we call the plot method, and we ask the plot to be made with points using the ` o `  marker."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11dc94f98>]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\ngg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1157bb9e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = [3]\n",
    "for i in range(10):\n",
    "    next = a[i] + 2\n",
    "    a.append(next)\n",
    "    \n",
    "plt.plot(a, 'o')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we can use the functional definition to create a plot.  First, we create a function named `a(n)`.  From here, we plug in $[0,1,2,3,4,5,6,7,8,9]$ in to $a(n)$ using the `range(10)` function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def a(n):\n",
    "    return 2*n + 3\n",
    "\n",
    "a = [a(i) for i in range(10)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x11dd9a080>]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11dc69978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(a, '--o')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
